#!/bin/bash

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
#DIR="$( cd -P "$( dirname "$SOURCE" )" && cd ../../bin && pwd )"
DIR="vendor/bin"

CODE_FAULTS=0
STANDARDS_FAULTS=0
FOLDER=$1

FAULT=$($DIR/phpmd $FOLDER text cleancode | wc -l)
CODE_FAULTS=$((CODE_FAULTS + FAULT)) 
echo "phpmd cleancode: $FAULT"

FAULT=$($DIR/phpmd $FOLDER text codesize | wc -l)
CODE_FAULTS=$((CODE_FAULTS + FAULT)) 
echo "phpmd codesize: $FAULT"

FAULT=$($DIR/phpmd $FOLDER text design | wc -l)
CODE_FAULTS=$((CODE_FAULTS + FAULT)) 
echo "phpmd design: $FAULT"

FAULT=$($DIR/phpmd $FOLDER text naming | wc -l)
CODE_FAULTS=$((CODE_FAULTS + FAULT)) 
echo "phpmd naming: $FAULT"

FAULT=$($DIR/phpmd $FOLDER text unusedcode | wc -l)
CODE_FAULTS=$((CODE_FAULTS + FAULT)) 
echo "phpmd unusedcode: $FAULT"

FAULT=$($DIR/phpcs --standard=Drupal --extensions=php,module,inc,install,test,profile,theme,css,info,txt,md $FOLDER --report=summary | sed -n -r 's/A TOTAL OF (.*) ERROR.*AND (.*) WARNING.*/\1 + \2/p')
FAULT=$(echo $FAULT | bc)
STANDARDS_FAULTS=$((STANDARDS_FAULTS + FAULT))
echo "phpcs Drupal: $FAULT"

FAULT=$($DIR/phpcs --standard=DrupalPractice --extensions=php,module,inc,install,test,profile,theme,css,info,txt,md $FOLDER --report=summary | sed -n -r 's/A TOTAL OF (.*) ERROR.*AND (.*) WARNING.*/\1 + \2/p')
FAULT=$(echo $FAULT | bc)
STANDARDS_FAULTS=$((STANDARDS_FAULTS + FAULT))
echo "phpcs DrupalPractice: $FAULT"

TOTAL=$($DIR/phploc --names=*.php,*.module,*.install,*.inc,*.js,*.scss $FOLDER | sed -n -r 's/.*\(NCLOC\) *(.*) \(.*\)/\1/p')
PERCENT=$(echo "scale=2; (($CODE_FAULTS + $STANDARDS_FAULTS) / $TOTAL) * 100" | bc | sed -n -r 's/(.*)\..*/\1/p')
if [ -z $PERCENT ]
then
  PERCENT=0
fi  

FAULTS=$((CODE_FAULTS + STANDARDS_FAULTS))

echo "Total Faults: $FAULTS
Total Lines: $TOTAL
Quality Score: $PERCENT faults per 100 lines"

RATIO=200
BASE=$(echo "scale=0; ($TOTAL / $RATIO) * sqrt($PERCENT)" | bc)

if [ $PERCENT -gt 25 ]
then
HOURS=$(echo "scale=0; ($TOTAL / $RATIO) * sqrt($PERCENT - ($PERCENT - 25))" | bc)
echo "Estimate to get to 25: $((BASE - HOURS)) hours"
fi

if [ $PERCENT -gt 10 ]
then
HOURS=$(echo "scale=0; ($TOTAL / $RATIO) * sqrt($PERCENT - ($PERCENT - 10))" | bc)
echo "Estimate to get to 10: $((BASE - HOURS)) hours"
fi

if [ $PERCENT -gt 5 ]
then
HOURS=$(echo "scale=0; ($TOTAL / $RATIO) * sqrt($PERCENT - ($PERCENT - 5))" | bc)
echo "Estimate to get to 5: $((BASE - HOURS)) hours"
fi

if [ $PERCENT -gt 3 ]
then
HOURS=$(echo "scale=0; ($TOTAL / $RATIO) * sqrt($PERCENT - ($PERCENT - 3))" | bc)
echo "Estimate to get to 3: $((BASE - HOURS)) hours"
fi
